apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: release-init
spec:
  params:
  - name: repo-url
    description: 项目仓库URL (需以约定格式, 处理为配置仓库URL)
  - name: project
    description: 项目ID, 用以区分命名空间
  - name: version
    description: 释放版本

  workspaces:
  - name: workspace
    description: 存储yaml仓库内容
  - name: add
    description: 存储待修改内容
  - name: token
    description: 存储gitea user token (于/token文件)

  tasks:
  - name: params
    taskSpec:
      steps:
      - image: 10.1.40.43:5000/busybox:1.31
        script: |
          url=$(params.repo-url)
          # echo -n ${url%.git*}-manifest.git > $(results.manifest-repo-url.path)
          echo -n ${url%.git*}-project.git > $(results.manifest-repo-url.path)

          # echo -n $(params.project)-manifest > $(results.manifest-project.path)
          echo -n $(params.project)-project > $(results.manifest-project.path)


          function parse() {
            value=$1
            echo -n $value | tr /[A-Z]. -[a-z]-
          }
          parse $(params.project) > $(results.project.path)
          parse $(params.version) > $(results.version.path)
      params:
      - name: repo-url
      - name: project
      - name: version
      results:
      - name: manifest-repo-url
      - name: manifest-project
      - name: project
      - name: version
    params:
    - name: repo-url
      value: $(params.repo-url)
    - name: project
      value: $(params.project)
    - name: version
      value: $(params.version)

  - name: fetch-flux-config-repo
    taskRef:
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
    params:
    - name: url
      value: $(tasks.params.results.manifest-repo-url)
    - name: revision
      value: master
    - name: deleteExisting
      value: 'true'

  - name: create-env-config
    runAfter:
    - fetch-flux-config-repo
    taskRef:
      name: git-add
    workspaces:
    - name: workspace
      workspace: workspace
    - name: add
      workspace: add
    params:
    - name: script-params
      value: |
        $(tasks.params.results.version)-auto-test \
        $(tasks.params.results.version)-uat \
    - name: message
      value: create env configs for version $(params.version)

  - name: create-ns
    runAfter:
    - create-env-config
    taskRef:
      name: ns-opt
    params:
    - name: opt
      value: create
    - name: names
      value: |
        $(tasks.params.results.project)-$(tasks.params.results.version)-pipeline \
        $(tasks.params.results.project)-$(tasks.params.results.version)-auto-test \
        $(tasks.params.results.project)-$(tasks.params.results.version)-uat \

  - name: init-flux-env
    runAfter:
    - create-ns
    taskRef:
      name: flux
    params:
    - name: git-url
      value: $(tasks.params.results.manifest-repo-url)
    - name: webhook
      value: http://el-env-pipeline.default:8080
    - name: envs
      value: |
        $(tasks.params.results.project)-$(tasks.params.results.version)-auto-test \
        $(tasks.params.results.project)-$(tasks.params.results.version)-uat \
    - name: namespaces
      value: |
        $(tasks.params.results.project)-$(tasks.params.results.version)-auto-test \
        $(tasks.params.results.project)-$(tasks.params.results.version)-uat \
    - name: git-paths
      value: |
        $(params.version)-auto-test \
        $(params.version)-uat \
    - name: http-registry
      value: 10.1.40.43:5000 

  - name: prepare-deploy-key-args
    taskSpec:
      steps:
      - image: 10.1.40.43:5000/busybox:1.31
        script: |
          while read env key; do
            test -n "$env" && echo $(params.project) $env \"$key\" >> $(results.args.path) || true
          done <<EOF
          $(params.keys)
          EOF
      params:
      - name: keys
      - name: project
      results:
      - name: args
    params:
    - name: keys
      value: $(tasks.init-flux-env.results.ssh-key) 
    - name: project
      value: $(tasks.params.results.manifest-project)

  - name: init-deploy-key
    taskRef:
      name: gitea
    params:
    - name: cmd
      value: addDeployKey
    - name: args
      value: $(tasks.prepare-deploy-key-args.results.args)
    workspaces:
    - name: token
      workspace: token
      subPath: token
