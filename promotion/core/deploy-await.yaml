apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: deploy-await
spec:
  params:
  - name: promotion-name
    description: promotion name
  - name: env-version
    description: env version, 用于关联具体env

  - name: env

  - name: expect-images
    description: 待部署的images, 以空格/换行分隔多个
  - name: tag-pattern
    description: 待部署的image tag pattern, expect-images tag均需满足

  - name: cmd-timeout
    default: '1m0s'
    description: fluxctl命令超时时间

  - name: await-count
    default: '0'
    description: 未能创建时,是否等待. 0,不等待,异常退出.
  - name: await-interval
    default: '15'
    description: 等待时


  volumes:
  - name: share
    emptyDir: {}


  steps:
  - name: jq
    image: 10.1.40.43:5000/stedolan/jq
    volumeMounts:
    - name: share
      mountPath: /volumes/share
    script: |
      cd /volumes/share
      cp /usr/local/bin/jq .
     
  - name: await
    image: 10.1.40.43:5000/fluxctl:1.20.1
    volumeMounts:
    - name: share
      mountPath: /volumes/share
    script: |
      set -ex
      set -o pipefail
      
      export PATH=$PATH:/volumes/share
      
      awaitCount=0
      function doAwait() {
        if test $awaitCount -ge $(params.await-count); then
          return 1
        fi
        awaitCount=$(($awaitCount+1))
        sleep $(params.await-interval)
      }
      
      function parseToNameSpace() {
        local value=$1
        # [a-z0-9]([-a-z0-9]*[a-z0-9])?
        echo $value | tr /[A-Z]. -[a-z]- | grep '[^-].*[^-]' -o | xargs echo -n
      }
      
      deployedNamespace=$(parseToNameSpace $(context.taskRun.namespace)-$(params.promotion-name)-$(params.env-version)-$(params.env))
      fluxctl="fluxctl --k8s-fwd-ns=${deployedNamespace} --k8s-fwd-labels=name=flux --timeout=$(params.cmd-timeout)"
      
      result=.result
      
      
      
      #------------ deploy ------------#
      
      function initWorkloads() {
        $fluxctl sync
        workloads=$($fluxctl list-workloads -n=${deployedNamespace} --no-headers | awk '$0~/^[^ ]/{print $1}')
        workloadSize=$(wc -l <<EOF
      ${workloads}
      EOF
      )
      }
      
      initWorkloads
      
      # only flux workloads (flux+memcached)
      while test ${workloadSize} -le 2; do
        doAwait
        initWorkloads
      done
      
      for workload in ${workloads}; do
        tag='glob:$(params.tag-pattern)'
        cmd="$fluxctl policy --tag-all='${tag}' -w ${workload} -v -m 'update tag-all to ${tag}'"
        if eval ${cmd} 2>${result}; then
          continue
        elif grep "fast-forwards" ${result} >/dev/null; then
          $fluxctl sync
          eval ${cmd}
        else
          exit 1
        fi  
      done
      
      $fluxctl sync
      $fluxctl release --update-all-images --all 2>${result} \
      || grep "no changes made in repo" ${result}
      $fluxctl sync
      
      #--------------------------------#
      
      
      
      #------------ await ------------#
      
      expectImages='$(params.expect-images)'
      function checkAllDeployed() {
        $fluxctl list-workloads -n=${deployedNamespace} -o json > ${result} 
        
        if jq -r .[].Status ${result} | grep -v ready; then
          echo "has workload not ready!"
          return 1
        fi
        
        jq -r .[].Containers[].Current.ID >${result}
        
        for image in ${expectImages}; do
          if grep "^${image}$" ${result}; then
            continue
          else
            return 1
          fi
        done
      }
      
      while true; do
        if checkAllDeployed; then
          exit 0
        fi
        doAwait
      done
      
      #--------------------------------#
