apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: init-robot-secret
spec:
  params:
  - name: url
    default: https://kubernetes.default

  - name: robot-name
  - name: robot-token
  
  - name: git-server-ssh
    description: "格式: *[@]host[:port]/*"

  volumes:
  - name: results
    emptyDir: {}
    
  results:
  - name: public-key
  
  steps:
  - name: build-ssh
    image: 10.1.40.43:5000/lgatica/openssh-client:latest
    volumeMounts:
    - name: results
      mountPath: /workspace/results
    script: |
      host='$(params.git-server-ssh)'
      host=${host#*@}
      host=${host%%/*}
      
      echo -n ${host} > /workspace/results/git-server-ssh
      
      host=${host%%:*}
      port=$(cut -d : -f 2 -s /workspace/results/git-server-ssh)
      
      ssh-keyscan ${port:+-p $port} ${host} > /workspace/results/known_hosts
      ssh-keygen -qN "" -C $(params.robot-name) -f /workspace/results/id_rsa
      
      cut -d " " -f 1-2 /workspace/results/id_rsa.pub \
      | xargs echo -n > $(results.public-key.path)
      
  - name: create-secret
    image: lachlanevenson/k8s-kubectl
    imagePullPolicy: IfNotPresent 
    volumeMounts:
    - name: results
      mountPath: /workspace/results
    script: |
      set -o pipefail
      
      url=$(params.url)
      ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
      namespace=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)

      kubectl="kubectl -s=$url --certificate-authority=$ca --token=$token -n $namespace"

        
      $kubectl apply -f - <<EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: gitea-user-token
      type: Opaque
      stringData:
        token: $(params.robot-token)
      EOF
      
      $kubectl apply -f - <<EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: git-ssh
        annotations:
          tekton.dev/git-0: $(cat /workspace/results/git-server-ssh)
      type: kubernetes.io/ssh-auth
      stringData:
        known_hosts: |
      $(awk '{print "    "$0}' /workspace/results/known_hosts)
        ssh-privatekey: |
      $(awk '{print "    "$0}' /workspace/results/id_rsa)
      EOF
      