apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: promotion-pipeline-config-convert
spec:
  params:
  - name: url
    default: https://kubernetes.default
  - name: scan-path
    description: 扫描指定目录内配置
    default: ""
  - name: repo-branch
    description: git仓库分支
  - name: expect-branch
    description: 期望git仓库分支, 仅为期望分支时生成pipeline
    default: master
  - name: deploy-success-webhook
    description: 部署成功通知地址, 用于需部署后测试的任务
    default: ""
  - name: promotion-pipelines-namespace
    description: promotion-pipelines 环境命名空间, 默认为当前ns
    default: ""
  - name: promotion-pipeline-namespace
    description: 部署promotion-pipeline到指定命名空间, 默认为当前ns
    default: ""
  workspaces:
  - name: resources
    description: 存储资源, 将扫描其内配置
    readOnly: true
  steps:
  - name: build
    image: lachlanevenson/k8s-kubectl
    imagePullPolicy: IfNotPresent 
    script: |
      url=$(params.url)
      ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
      namespace=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)


      promotionPipelinesNs="$(params.promotion-pipelines-namespace)"
      promotionPipelineNs="$(params.promotion-pipeline-namespace)"
      
      if test -z "$promotionPipelinesNs"; then
        promotionPipelinesNs=${namespace}
      fi
      if test -z "$promotionPipelineNs"; then
        promotionPipelineNs=${namespace}
      fi

      kubectl="kubectl -s=$url --certificate-authority=$ca --token=$token"
      
      
      if test "$(params.repo-branch)" != "$(params.expect-branch)"; then
        exit
      fi
      
      mkdir ~/script -p && cd ~/script
      cat <<EOFEOFEOFEOF > env-deploy-task-template.yaml
      taskRef:
        kind: ClusterTask
        name: pipelinerun-apply
      params:
      - name: span-id
        value: "__QKDutK__(params.job-id)"
      - name: namespace
        value: __QKDutK__{NAMESPACE}
      - name: generate-name
        value: env-deploy-__QKDutK__{INNER_PIPELINE_RUN_NAME}
      - name: spec
        value: |
          pipelineRef:
            name: env-deploy
          workspaces:
          - name: pipeline 
            persistentVolumeClaim:
              claimName: __QKDutK__(params.pipelines-claim)
            subPath: __QKDutK__(params.job-id)
          - name: gitea-user-token
            secret:
              SecretName: gitea-user-token
          params:
          - name: job-id
            value: "__QKDutK__(params.job-id)"
          - name: pipelines-claim
            value: "__QKDutK__(params.pipelines-claim)"
          - name: env
            value: "__QKDutK__{ENV}"
          - name: promotion-name
            value: "__QKDutK__(params.promotion-name)"
          - name: env-version
            value: "__QKDutK__(params.env-version)"
          - name: repo-full-name
            value: "__QKDutK__(params.repo-full-name)"
          - name: repo-ref
            value: "__QKDutK__(params.repo-ref)"
          - name: manifest-repo-full-name
            value: "__QKDutK__(params.manifest-repo-full-name)"
          - name: manifest-repo-url
            value: __QKDutK__(params.manifest-repo-url)
          - name: git-server-http
            value: __QKDutK__(params.git-server-http)
          - name: issue-id
            value: "__QKDutK__(params.issue-id)"
          - name: deploy-webhook
            value: "__QKDutK__{DEPLOY_SUCCESS_WEBHOOK}"
      - name: return-task
        value: env-lock-name
      EOFEOFEOFEOF
      sed -i '/__QKDutK__/s/__QKDutK__/$/g' env-deploy-task-template.yaml
      cat <<EOFEOFEOFEOF > env-release-task-template.yaml
      taskRef:
        kind: ClusterTask
        name: env-release
      params:
      - name: job-id
        value: "__ROCsYt__(params.job-id)"
      - name: env
        value: __ROCsYt__{ENV}
      - name: promotion-name
        value: "__ROCsYt__(params.promotion-name)"
      - name: env-version
        value: "__ROCsYt__(params.env-version)"
      EOFEOFEOFEOF
      sed -i '/__ROCsYt__/s/__ROCsYt__/$/g' env-release-task-template.yaml
      cat <<EOFEOFEOFEOF > manual-test-task-template.yaml
      taskRef:
        kind: ClusterTask
        name: pipelinerun-apply
      params:
      - name: span-id
        value: "__4ZZhOR__(params.job-id)"
      - name: namespace
        value: __4ZZhOR__{NAMESPACE}
      - name: generate-name
        value: manual-test-__4ZZhOR__{INNER_PIPELINE_RUN_NAME}
      - name: spec
        value: |
          pipelineRef:
            name: manual-test
          workspaces:
          - name: pipeline 
            persistentVolumeClaim:
              claimName: __4ZZhOR__(params.pipelines-claim)
            subPath: __4ZZhOR__(params.job-id)
          - name: gitea-user-token
            secret:
              SecretName: gitea-user-token
          params:
          - name: job-id
            value: "__4ZZhOR__(params.job-id)"
          - name: pipelines-claim
            value: "__4ZZhOR__(params.pipelines-claim)"
          - name: env
            value: "__4ZZhOR__{ENV}"
          - name: promotion-name
            value: "__4ZZhOR__(params.promotion-name)"
          - name: env-version
            value: "__4ZZhOR__(params.env-version)"
          - name: repo-full-name
            value: "__4ZZhOR__(params.repo-full-name)"
          - name: repo-ref
            value: "__4ZZhOR__(params.repo-ref)"
          - name: manifest-repo-full-name
            value: "__4ZZhOR__(params.manifest-repo-full-name)"
          - name: manifest-repo-url
            value: __4ZZhOR__(params.manifest-repo-url)
          - name: git-server-http
            value: __4ZZhOR__(params.git-server-http)
          - name: issue-id
            value: "__4ZZhOR__(params.issue-id)"
          - name: deploy-webhook
            value: "__4ZZhOR__{DEPLOY_SUCCESS_WEBHOOK}"
      EOFEOFEOFEOF
      sed -i '/__4ZZhOR__/s/__4ZZhOR__/$/g' manual-test-task-template.yaml
      cat <<EOFEOFEOFEOF > promotion-pipeline-header-template.yaml
      apiVersion: tekton.dev/v1beta1
      kind: Pipeline
      metadata:
        name: __iFOfIA__{PROMOTION_NAME}
        labels:
          promotion-pipelines/custom-config: "true"
        annotations:
          promotion-pipelines/branch-pattern: __iFOfIA__{BRANCH_PATTERN}
      spec:
        params:
        - name: job-id
          description: 任务ID,串联起所有子流水线
        - name: pipelines-claim
          description: pipelines-pvc claim, 用于传递给启动的pipelinerun
      
        - name: promotion-name
          description: promotion name
        - name: env-version
          description: env version, 用于关联具体env
          
        - name: repo-full-name
          description: git仓库名称, 用于执行gitea请求 (创建工单,评论)
        - name: repo-branch
          description: git仓库分支
        - name: repo-ref
          description: git仓库SHA
        - name: repo-url
          description: git仓库URL
          
        - name: manifest-repo-full-name
          description: 资源仓库名称
        - name: manifest-repo-url
          description: 资源仓库URL
      
        - name: git-server-http
          description: git server host (如:http://localhost:30280)
        - name: issue-id
          description: 工单ID, 用以与用户交互
      
        workspaces:
        - name: pipeline
          description: 流水线数据目录
      EOFEOFEOFEOF
      sed -i '/__iFOfIA__/s/__iFOfIA__/$/g' promotion-pipeline-header-template.yaml
      cat <<EOFEOFEOFEOF > convert.sh
      PROMOTION_PIPELINE_HEADER_TEMPLATE="promotion-pipeline-header-template.yaml"
      ENV_DEPLOY_TASK_TEMPLATE="env-deploy-task-template.yaml"
      ENV_RELEASE_TASK_TEMPLATE="env-release-task-template.yaml"
      MANUAL_TEST_TASK_TEMPLATE="manual-test-task-template.yaml"
      
      configDir=__3OybNf__1  #存储项目中资源配置
      shift
      
      pipelineDir=__3OybNf__1  #pipeline输出目录
      shift
      output="" #存储生成的pipeline文件
      
      tmpDir="./"  #存储临时文件
      
      deploySuccessWebhook=__3OybNf__1
      shift
      
      promotionPipelinesNamespace=__3OybNf__1
      
      #-----------------------------------------------------
      
      function validateConfig() {
        local configFile=__3OybNf__1
        if egrep "^ +taskSpec:" __3OybNf__{configFile}; then
          echo '[taskSpec] cannot exist !' >&2
          return 1
        fi
      }
      
      #-----------------------------------------------------
      
      function pipelineHeader() {
        local configFile=__3OybNf__1
        
        local pipelineName=__3OybNf__(basename __3OybNf__configFile) \\
           && pipelineName=__3OybNf__{configFile#*pipeline.} \\
           && pipelineName=__3OybNf__{pipelineName%.yaml*}
        
        local branchPattern=__3OybNf__(sed -nr '/^branchPattern: .+__3OybNf__/ {s/^branchPattern: (.+)__3OybNf__/\\1/p;q}' __3OybNf__{configFile})
        if test -z "__3OybNf__{branchPattern}"; then
          echo '[branchPattern] not specified !' >&2
          return 1
        fi
        
        sed -e "s/\\__3OybNf__{PROMOTION_NAME}/__3OybNf__{pipelineName}/" \\
            -e "s/\\__3OybNf__{BRANCH_PATTERN}/__3OybNf__{branchPattern}/" \\
            __3OybNf__{PROMOTION_PIPELINE_HEADER_TEMPLATE} >> __3OybNf__{output}
      }
      
      #-----------------------------------------------------
      
      function pipelineTasks() {
        echo "  tasks:" >> __3OybNf__{output}
        
        local configFile=__3OybNf__1
        
        local TEMP_PREFIX="__3OybNf__{tmpDir}/.tmp.pipeline-task-"
        
        splitTasks __3OybNf__{configFile} __3OybNf__{TEMP_PREFIX} tasks
        
        local file=""
        for file in __3OybNf__{TEMP_PREFIX}*; do
          local task=__3OybNf__(getTaskType __3OybNf__file)
          case __3OybNf__task in
            env-deploy ) envDeployTask __3OybNf__file;;
            manual-test ) manualTestTask __3OybNf__file;;
            env-release ) envReleaseTask __3OybNf__file;;
            * ) commonTask __3OybNf__file;;
          esac
        done
        
        rm __3OybNf__{TEMP_PREFIX}* -f
      }
      
      function pipelineFinally() {
        local configFile=__3OybNf__1
        
        if grep "^finally:" 2>&1 >/dev/null __3OybNf__{configFile}; then
          echo "  finally:" >> __3OybNf__{output}
        else
          return 0
        fi
        
        local TEMP_PREFIX="__3OybNf__{tmpDir}/.tmp.pipeline-finally-task-"
        
        splitTasks __3OybNf__{configFile} __3OybNf__{TEMP_PREFIX} finally
        
        local file=""
        for file in __3OybNf__{TEMP_PREFIX}*; do
          local task=__3OybNf__(getTaskType __3OybNf__file)
          case __3OybNf__task in
            env-deploy ) return 1;;
            manual-test ) return 1;;
            env-release ) envReleaseTask __3OybNf__file;;
            * ) commonTask __3OybNf__file;;
          esac
        done
        
        rm __3OybNf__{TEMP_PREFIX}* -f
      }
      
      #-----------------------------------------------------
      
      #拆分tasks到独立文件
      function splitTasks() {
        local configFile=__3OybNf__1
        local tempPreifx=__3OybNf__2
        local section=__3OybNf__3
        
        local i=0
        local file=
        while IFS=~ read line; do
          if echo "__3OybNf__line"|grep ^- 2>&1 >/dev/null; then
            i=__3OybNf__(( __3OybNf__i + 1 ))
            file=__3OybNf__{tempPreifx}__3OybNf__i
            touch __3OybNf__file
          fi
          echo "__3OybNf__line" >> __3OybNf__{file}
        done <<EOF
      __3OybNf__(sed -nr "/^__3OybNf__{section}:/,/^[a-zA-Z0-9]/ {/^[- ]/p}" __3OybNf__{configFile})
      EOF
      }
      
      function getTaskType() {
        local taskFile=__3OybNf__1
        sed -nr '/  taskRef:/,/^  [a-zA-Z0-9]/{/^    name:/s/.*name: (.*)/\\1/p}' __3OybNf__{taskFile}
      }
      function getContent() {
        local file=__3OybNf__1
        local key=__3OybNf__2
        
        local hasKey=__3OybNf__3
        local args=
        if test "__3OybNf__hasKey" == "true"; then
          args="/^  __3OybNf__key:/{p;d} /^- __3OybNf__key:/{s/^-(.*)/ \\1/p;d}"
        fi
        sed -nr "/^[- ] __3OybNf__key:/,/^  [a-zA-Z0-9]/{__3OybNf__args /^  [- ]/p}" __3OybNf__file
      }
      function getValue() {
        local file=__3OybNf__1
        local name=__3OybNf__2
        local prefix="__3OybNf__3"
        sed -nr "/^__3OybNf__{prefix}- name: __3OybNf__{name}/,/^__3OybNf__{prefix}[^ ]/ {
          /^__3OybNf__{prefix}  value: [^|]/ {
            s/^ +value: (.*)/\\1/p;
            q;
          }
          /^__3OybNf__{prefix}  value: |/ {
            s/^ +value: (.*)/\\1/p;
          }
          /^__3OybNf__{prefix}    / {
            s/^__3OybNf__{prefix}  (.*)/\\1/p;
          }
        }" __3OybNf__{file}
      }
      function addValue() {
        local taskFile=__3OybNf__1
        local prefix=__3OybNf__2
        local name=__3OybNf__3
        local value=__3OybNf__4
        sed -i "/^__3OybNf__{prefix}params:/a\\\\__3OybNf__{prefix}- name: __3OybNf__{name}\\n__3OybNf__{prefix}  value: __3OybNf__{value}" __3OybNf__{taskFile}
      }
      
      function commonTask() {
        local taskFile=__3OybNf__1
        if getContent __3OybNf__{taskFile} taskRef | grep kind: 2>&1 >/dev/null; then
          echo '[kind] cannot be specified in [taskRef] !' >&2
          return 1
        fi
        sed -r '/^  taskRef:/a\\    kind: ClusterTask' __3OybNf__{taskFile} \\
        | awk '{print "  "__3OybNf__0}' >> __3OybNf__{output}
      }
      
      function envReleaseTask() {
        deployedTestTask __3OybNf__1 __3OybNf__{ENV_RELEASE_TASK_TEMPLATE}
      }
      
      function envDeployTask() {
        deployedTestTask __3OybNf__1 __3OybNf__{ENV_DEPLOY_TASK_TEMPLATE}
      }
      
      function manualTestTask() {
        deployedTestTask __3OybNf__1 __3OybNf__{MANUAL_TEST_TASK_TEMPLATE}
      }
      
      function deployedTestTask() {
        local taskFile=__3OybNf__1
        local templateFile=__3OybNf__2
        
        local name=__3OybNf__(getContent __3OybNf__{taskFile} name true)
        local innerPipelineRunName=__3OybNf__{name#*: }
        
        echo "__3OybNf__{name}" |  sed -r 's/^ (.*)/  -\\1/' >> __3OybNf__{output}
        getContent __3OybNf__{taskFile} runAfter true | awk '{print "  "__3OybNf__0}' >> __3OybNf__{output}
        
        local env=__3OybNf__(getValue __3OybNf__{taskFile} env "  ")
        sed -e "s/\\__3OybNf__{INNER_PIPELINE_RUN_NAME}/__3OybNf__{innerPipelineRunName}/" \\
            -e "s/\\__3OybNf__{NAMESPACE}/__3OybNf__{promotionPipelinesNamespace}/" \\
            -e "s/\\__3OybNf__{ENV}/__3OybNf__{env}/" \\
            -e "s/\\__3OybNf__{DEPLOY_SUCCESS_WEBHOOK}/__3OybNf__{deploySuccessWebhook}/" \\
            __3OybNf__{templateFile} \\
        | awk '{print "    "__3OybNf__0}' >> __3OybNf__{output}
      }
      
      #-----------------------------------------------------
      set -ex
      
      mkdir __3OybNf__{pipelineDir} -p
      
      for file in __3OybNf__(find __3OybNf__{configDir} -maxdepth 1 -name 'pipeline.promotion-*.yaml'); do
        output=__3OybNf__{pipelineDir}/__3OybNf__(basename __3OybNf__file)
        
        validateConfig __3OybNf__file
      
        pipelineHeader __3OybNf__file
      
        pipelineTasks __3OybNf__file
        
        pipelineFinally __3OybNf__file
      done
      EOFEOFEOFEOF
      sed -i '/__3OybNf__/s/__3OybNf__/$/g' convert.sh
      sh convert.sh '$(workspaces.resources.path)/$(params.scan-path)' ~/output '$(params.deploy-success-webhook)' "${promotionPipelinesNs}"
      $kubectl apply -f ~/output -n ${promotionPipelineNs}
