apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: git-clone
spec:
  workspaces:
    - name: output
      description: The git repo will be cloned onto the volume backing this workspace
  params:
    - name: url
      description: git url to clone
      type: string
    - name: revision
      description: git revision to checkout (branch, tag, sha, ref…)
      type: string
      default: master
    - name: depth
      description: performs a shallow clone where only the most recent commit(s) will be fetched
      type: string
      default: "1"
    - name: subdirectory
      description: subdirectory inside the "output" workspace to clone the git repo into
      type: string
      default: ""
    - name: deleteExisting
      description: clean out the contents of the repo's destination directory (if it already exists) before trying to clone the repo there
      type: string
      default: "false"
    - name: user
      default: none
    - name: email
      default: none@no.user.com
  results:
    - name: commit
      description: The precise commit SHA that was fetched by this Task
  steps:
    - name: clone
      image: 10.1.40.43:5000/alpine/git:1.0.17
      script: |
        CHECKOUT_DIR="$(workspaces.output.path)/$(params.subdirectory)"
        mkdir -p $CHECKOUT_DIR
        cd $CHECKOUT_DIR

        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
          # or the root of a mounted volume.
          if [[ -d "$CHECKOUT_DIR" ]] ; then
            # Delete non-hidden files and directories
            rm -rf "$CHECKOUT_DIR"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "$CHECKOUT_DIR"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "$CHECKOUT_DIR"/..?*
          fi
        }

        reuse() {
          if test -d .git; then
            commit=$(git show --format=%H | head -n 1)
            if test $commit == $(params.revision); then
              exit 0
            fi
          fi
        }

        if [[ "$(params.deleteExisting)" == "true" ]] ; then
          cleandir
        fi

        reuse

        test -d $HOME/.ssh && ln -s $HOME/.ssh /root/.ssh

        git config --global user.email "$(params.email)"
        git config --global user.name "$(params.user)"

        # 仅下载指定commit
        git init
        git remote add origin $(params.url)
        git fetch origin $(params.revision)
        git reset --hard FETCH_HEAD

        # 设置upstream
        git fetch --tag
        set +e
        git branch --set-upstream-to=origin/$(params.revision) master
        set -e       

        # git clone $(params.url) $CHECKOUT_DIR \
        #  -b $(params.revision) --single-branch --depth $(params.depth)

        cd "$CHECKOUT_DIR"
        RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
        EXIT_CODE="$?"
        if [ "$EXIT_CODE" != 0 ]
        then
          exit $EXIT_CODE
        fi
        # Make sure we don't add a trailing newline to the result!
        echo -n "$RESULT_SHA" > $(results.commit.path)
