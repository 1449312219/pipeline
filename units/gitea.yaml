apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: gitea
spec:
  workspaces:
  - name: token
    description: 需存在名为token文件, 存储gitea-user-token
    readOnly: true

  params:
    - name: git-server
      description: git server host
      default: "http://gitea-gitea-http:3000"

    - name: cmd
      description: addDeployKey / createIssue / createComment
    - name: args
      description: |
        传于gitea相应请求, 可支持循环
        createRepo:  owner type(user/org) repoName repoDescription
        addCollaborator: repoFullName userName permission
        addDeployKey:  repoFullName title key
        createIssue:  repoFullName title body assignees
        getIssueId:  repoFullName title
        createComment:  repoFullName issueId body
        createWebHook:  repoFullName notifyUrl branchFilter events (多个event以逗号分隔)


  results:
  - name: output
  - name: repo-url
    description: |
      仅createRepo时返回, 格式为: repo-name ssh-url

  volumes:
  - name: output
    emptyDir: {}

  steps:
    - name: jq
      image: 10.1.40.43:5000/stedolan/jq
      volumeMounts:
      - name: output
        mountPath: /volumes/output
      script: |
        cd /volumes/output
        cp /usr/local/bin/jq .

    - name: await
      image: 10.1.40.43:5000/curlimages/curl:7.71.1
      volumeMounts:
      - name: output
        mountPath: /volumes/output
      script: |
        set -o pipefail

        export PATH=$PATH:/volumes/output

        function url() {
          method=$1
          path=$2
          server=$(params.git-server)
          token=$(cat $(workspaces.token.path)/token)
          data=$3

          if echo $path | grep ? 2>&1 >/dev/null; then
            path="$path&access_token=$token"
          else
            path=$path?access_token=$token
          fi
        
          echo "curl -X $method" \
                \"$server/api/v1$path\" \
                -H \"accept: application/json\" -H \"Content-Type: application/json\" \
                -d \'$data\' \
                -f
        }

        function createRepo() {
          local owner=$1
          local type=$2
          local name=$3
          local description=$4

          local path
          if test "$type" == "user"; then
            path=/admin/users/${owner}/repos
          else
            path=/orgs/${owner}/repos
          fi

          url=$(url POST $path "{
                  \"name\": \"$name\",
                  \"default_branch\": \"master\",
                  \"private\": false,
                  \"auto_init\": true,
                  \"description\": \"$description\" }")
          local content=$(sh -c "$url")

          echo $name $(echo $content | jq -r .ssh_url) >> $(results.repo-url.path)
          echo $content | jq -r .id
        }

        function addCollaborator() {
          repoFullName=$1
          name=$2
          permission=${3-write}
          assignees=$4  #(echo $3|sed 's|"|\\"|g')
          url=$(url PUT /repos/$repoFullName/collaborators/$name "{
                  \"permission\": \"$permission\" }")
          sh -c "$url" | jq -r .id
        }
        
        function createIssue() {
          repoFullName=$1
          title=$2
          body=$3
          assignees=$4  #(echo $3|sed 's|"|\\"|g')
          url=$(url POST /repos/$repoFullName/issues "{
                  \"title\": \"$title\",
                  \"body\": \"$body\", 
                  \"assignees\": [ $assignees ] }")
          sh -c "$url" | jq -r .id
        }

        function getIssueId() {
          repoFullName=$1
          title=$2
          url=$(url GET /repos/$repoFullName/issues?type=issues\&q=$title)
          res=$(sh -c "$url")

          if test $(echo $res | jq length) -eq 1; then
            res=$(echo $res | jq -r .[0])
            if test $(echo $res | jq -r .title) == $title; then
              echo $res | jq -r .number
              return
            fi
          fi
          exit 1
        }
        
        function createComment() {
          repoFullName=$1
          issue=$2
          body=${3//\"/\\\"}
          url=$(url POST /repos/$repoFullName/issues/$issue/comments "{ \"body\": \"$body\" }")
          sh -c "$url" | jq -r .id
        }
 
        function addDeployKey() {
          repoFullName=$1
          title=$2
          key=$3
          url=$(url POST /repos/$repoFullName/keys "{ \"title\": \"$title\", \"key\": \"$key\", \"read_only\": true }")
          sh -c "$url" | jq -r .id
        }

        function createWebHook() {
          repoFullName=$1
          notifyUrl=$2
          branchFilter=$3
          events=$(echo $4 | sed -e 's/,/\",\"/g' -e 's/^/\"/' -e 's/$/\"/')
          url=$(url POST /repos/$repoFullName/hooks "{
                  \"type\": \"gitea\",
                  \"branch_filter\": \"$branchFilter\",
                  \"events\": [ $events ],
                  \"config\": {
                    \"url\": \"$notifyUrl\",
                    \"content_type\": \"json\"
                  },
                  \"active\": true }")
          sh -c "$url" | jq -r .id
        }

        while read args; do
          if test -n "$args"; then
            eval $(params.cmd) $args | xargs -I {} echo -n {}" " >> $(results.output.path) 
          else
            true
          fi
        done <<EOF
        $(params.args)
        EOF
