apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: promotion-config-convert
spec:
  params:
  - name: url
    default: https://kubernetes.default
  - name: scan-path
    description: 扫描指定目录内配置
    default: ""
  - name: repo-branch
    description: git仓库分支
  - name: expect-branch
    description: 期望git仓库分支, 仅为期望分支时生成pipeline
    default: master
  - name: deploy-success-webhook
    description: 部署成功通知地址, 用于需部署后测试的任务
    default: ""
  workspaces:
  - name: resources
    description: 存储资源, 将扫描其内配置
    readOnly: true
  steps:
  - name: build
    image: lachlanevenson/k8s-kubectl
    imagePullPolicy: IfNotPresent 
    script: |
      url=$(params.url)
      ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
      namespace=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)

      kubectl="kubectl -s=$url --certificate-authority=$ca --token=$token"
      
      
      if test "$(params.repo-branch)" != "$(params.expect-branch)"; then
        exit
      fi
      
      mkdir ~/script -p && cd ~/script
      cat <<EOFEOFEOFEOF > auto-test-task-template.yaml
      taskRef:
        kind: ClusterTask
        name: pipelinerun-apply
      params:
      - name: span-id
        value: "__uFnKzl__(params.job-id)"
      - name: name
        value: __uFnKzl__(context.pipelineRun.name)-trigger-__uFnKzl__{INNER_PIPELINE_NAME}
      - name: spec
        value: |
          pipelineRef:
            name: __uFnKzl__{INNER_PIPELINE_NAME}
          workspaces:
          - name: pipeline 
            persistentVolumeClaim:
              claimName: __uFnKzl__(params.pipelines-claim)
            subPath: __uFnKzl__(params.job-id)
          - name: gitea-user-token
            secret:
              SecretName: gitea-user-token
          params:
          - name: job-id
            value: "__uFnKzl__(params.job-id)"
          - name: pipelines-claim
            value: "__uFnKzl__(params.pipelines-claim)"
          - name: env
            value: "__uFnKzl__{ENV}"
          - name: promotion-name
            value: "__uFnKzl__(params.promotion-name)"
          - name: env-version
            value: "__uFnKzl__(params.env-version)"
          - name: repo-full-name
            value: "__uFnKzl__(params.repo-full-name)"
          - name: repo-ref
            value: "__uFnKzl__(params.repo-ref)"
          - name: manifest-repo-full-name
            value: "__uFnKzl__(params.manifest-repo-full-name)"
          - name: manifest-repo-url
            value: __uFnKzl__(params.manifest-repo-url)
          - name: git-server-http
            value: __uFnKzl__(params.git-server-http)
          - name: issue-id
            value: "__uFnKzl__(params.issue-id)"
          - name: deploy-webhook
            value: "__uFnKzl__{DEPLOY_SUCCESS_WEBHOOK}"
      EOFEOFEOFEOF
      sed -i '/__uFnKzl__/s/__uFnKzl__/$/g' auto-test-task-template.yaml
      cat <<EOFEOFEOFEOF > manual-test-task-template.yaml
      taskRef:
        kind: ClusterTask
        name: pipelinerun-apply
      params:
      - name: span-id
        value: "__NL2SQG__(params.job-id)"
      - name: name
        value: __NL2SQG__(context.pipelineRun.name)-trigger-manual-test-__NL2SQG__{INNER_PIPELINE_RUN_NAME}
      - name: spec
        value: |
          pipelineRef:
            name: manual-test
          workspaces:
          - name: pipeline 
            persistentVolumeClaim:
              claimName: __NL2SQG__(params.pipelines-claim)
            subPath: __NL2SQG__(params.job-id)
          - name: gitea-user-token
            secret:
              SecretName: gitea-user-token
          params:
          - name: job-id
            value: "__NL2SQG__(params.job-id)"
          - name: pipelines-claim
            value: "__NL2SQG__(params.pipelines-claim)"
          - name: env
            value: "__NL2SQG__{ENV}"
          - name: promotion-name
            value: "__NL2SQG__(params.promotion-name)"
          - name: env-version
            value: "__NL2SQG__(params.env-version)"
          - name: repo-full-name
            value: "__NL2SQG__(params.repo-full-name)"
          - name: repo-ref
            value: "__NL2SQG__(params.repo-ref)"
          - name: manifest-repo-full-name
            value: "__NL2SQG__(params.manifest-repo-full-name)"
          - name: manifest-repo-url
            value: __NL2SQG__(params.manifest-repo-url)
          - name: git-server-http
            value: __NL2SQG__(params.git-server-http)
          - name: issue-id
            value: "__NL2SQG__(params.issue-id)"
          - name: deploy-webhook
            value: "__NL2SQG__{DEPLOY_SUCCESS_WEBHOOK}"
      EOFEOFEOFEOF
      sed -i '/__NL2SQG__/s/__NL2SQG__/$/g' manual-test-task-template.yaml
      cat <<EOFEOFEOFEOF > promotion-pipeline-header-template.yaml
      apiVersion: tekton.dev/v1beta1
      kind: Pipeline
      metadata:
        name: __NCxejE__{PROMOTION_NAME}
        labels:
          promotion-pipelines/custom-config: "true"
        annotations:
          promotion-pipelines/branch-pattern: __NCxejE__{BRANCH_PATTERN}
      spec:
        params:
        - name: job-id
          description: 任务ID,串联起所有子流水线
        - name: pipelines-claim
          description: pipelines-pvc claim, 用于传递给启动的pipelinerun
      
        - name: promotion-name
          description: promotion name
        - name: env-version
          description: env version, 用于关联具体env
          
        - name: repo-full-name
          description: git仓库名称, 用于执行gitea请求 (创建工单,评论)
        - name: repo-branch
          description: git仓库分支
        - name: repo-ref
          description: git仓库SHA
        - name: repo-url
          description: git仓库URL
          
        - name: manifest-repo-full-name
          description: 资源仓库名称
        - name: manifest-repo-url
          description: 资源仓库URL
      
        - name: git-server-http
          description: git server host (如:http://localhost:30280)
        - name: issue-id
          description: 工单ID, 用以与用户交互
      
        workspaces:
        - name: pipeline
          description: 流水线数据目录
      EOFEOFEOFEOF
      sed -i '/__NCxejE__/s/__NCxejE__/$/g' promotion-pipeline-header-template.yaml
      cat <<EOFEOFEOFEOF > convert.sh
      PROMOTION_PIPELINE_HEADER_TEMPLATE="promotion-pipeline-header-template.yaml"
      AUTO_TEST_TASK_TEMPLATE="auto-test-task-template.yaml"
      MANUAL_TEST_TASK_TEMPLATE="manual-test-task-template.yaml"
      
      configDir=__GEw7cB__1  #存储项目中资源配置
      shift
      
      pipelineDir=__GEw7cB__1  #pipeline输出目录
      shift
      output="" #存储生成的pipeline文件
      
      tmpDir="./"  #存储临时文件
      
      deploySuccessWebhook=__GEw7cB__1
      
      #-----------------------------------------------------
      
      function validateConfig() {
        local configFile=__GEw7cB__1
        if egrep "^ +taskSpec:" __GEw7cB__{configFile}; then
          echo '[taskSpec] cannot exist !' >&2
          return 1
        fi
      }
      
      #-----------------------------------------------------
      
      function pipelineHeader() {
        local configFile=__GEw7cB__1
        
        local pipelineName=__GEw7cB__(basename __GEw7cB__configFile) \\
           && pipelineName=__GEw7cB__{configFile#*pipeline.} \\
           && pipelineName=__GEw7cB__{pipelineName%.yaml*}
        
        local branchPattern=__GEw7cB__(sed -nr '/^branchPattern: .+__GEw7cB__/ {s/^branchPattern: (.+)__GEw7cB__/\\1/p;q}' __GEw7cB__{configFile})
        if test -z "__GEw7cB__{branchPattern}"; then
          echo '[branchPattern] not specified !' >&2
          return 1
        fi
        
        sed -e "s/\\__GEw7cB__{PROMOTION_NAME}/__GEw7cB__{pipelineName}/" \\
            -e "s/\\__GEw7cB__{BRANCH_PATTERN}/__GEw7cB__{branchPattern}/" \\
            __GEw7cB__{PROMOTION_PIPELINE_HEADER_TEMPLATE} >> __GEw7cB__{output}
      }
      
      #-----------------------------------------------------
      
      function pipelineTasks() {
        echo "  tasks:" >> __GEw7cB__{output}
        
        local configFile=__GEw7cB__1
        
        local TEMP_PREFIX="__GEw7cB__{tmpDir}/.tmp.pipeline-task-"
        
        splitTasks __GEw7cB__{configFile} __GEw7cB__{TEMP_PREFIX}
        
        local file=""
        for file in __GEw7cB__{TEMP_PREFIX}*; do
          local task=__GEw7cB__(getTaskType __GEw7cB__file)
          case __GEw7cB__task in
            auto-test ) autoTestTask __GEw7cB__file;;
            manual-test ) manualTestTask __GEw7cB__file;;
            * ) commonTask __GEw7cB__file;;
          esac
        done
        
        rm __GEw7cB__{TEMP_PREFIX}* -f
      }
      
      #拆分tasks到独立文件
      function splitTasks() {
        local configFile=__GEw7cB__1
        local tempPreifx=__GEw7cB__2
        
        local i=0
        local file=
        while IFS=~ read line; do
          if echo "__GEw7cB__line"|grep ^- 2>&1 >/dev/null; then
            i=__GEw7cB__(( __GEw7cB__i + 1 ))
            file=__GEw7cB__{tempPreifx}__GEw7cB__i
            touch __GEw7cB__file
          fi
          echo "__GEw7cB__line" >> __GEw7cB__{file}
        done <<EOF
      __GEw7cB__(sed -nr '/^tasks:/,/^[a-zA-Z0-9]/ {/^[- ]/p}' __GEw7cB__{configFile})
      EOF
      }
      
      function getTaskType() {
        local taskFile=__GEw7cB__1
        sed -nr '/  taskRef:/,/^  [a-zA-Z0-9]/{/^    name:/s/.*name: (.*)/\\1/p}' __GEw7cB__{taskFile}
      }
      function getContent() {
        local file=__GEw7cB__1
        local key=__GEw7cB__2
        
        local hasKey=__GEw7cB__3
        local args=
        if test "__GEw7cB__hasKey" == "true"; then
          args="/^  __GEw7cB__key:/{p;d} /^- __GEw7cB__key:/{s/^-(.*)/ \\1/p;d}"
        fi
        sed -nr "/^[- ] __GEw7cB__key:/,/^  [a-zA-Z0-9]/{__GEw7cB__args /^  [- ]/p}" __GEw7cB__file
      }
      function getValue() {
        local file=__GEw7cB__1
        local name=__GEw7cB__2
        local prefix="__GEw7cB__3"
        sed -nr "/^__GEw7cB__{prefix}- name: __GEw7cB__{name}/,/^__GEw7cB__{prefix}[^ ]/ {
          /^__GEw7cB__{prefix}  value: [^|]/ {
            s/^ +value: (.*)/\\1/p;
            q;
          }
          /^__GEw7cB__{prefix}  value: |/ {
            s/^ +value: (.*)/\\1/p;
          }
          /^__GEw7cB__{prefix}    / {
            s/^__GEw7cB__{prefix}  (.*)/\\1/p;
          }
        }" __GEw7cB__{file}
      }
      
      function commonTask() {
        local taskFile=__GEw7cB__1
        if getContent __GEw7cB__{taskFile} taskRef | grep kind: 2>&1 >/dev/null; then
          echo '[kind] cannot be specified in [taskRef] !' >&2
          return 1
        fi
        sed -r '/^  taskRef:/a\\    kind: ClusterTask' __GEw7cB__{taskFile} \\
        | awk '{print "  "__GEw7cB__0}' >> __GEw7cB__{output}
      }
      
      function autoTestTask() {
        local taskFile=__GEw7cB__1
        
        local name=__GEw7cB__(getContent __GEw7cB__{taskFile} name true)
        local innerPipelineName=__GEw7cB__{name#*: }
        
        echo "__GEw7cB__{name}" | sed -r 's/^ (.*)/  -\\1/' >> __GEw7cB__{output}
        getContent __GEw7cB__{taskFile} runAfter true | awk '{print "  "__GEw7cB__0}' >> __GEw7cB__{output}
        
        sed "s/\\__GEw7cB__{INNER_PIPELINE_NAME}/__GEw7cB__{innerPipelineName}/" __GEw7cB__{AUTO_TEST_TASK_TEMPLATE} \\
        | awk '{print "    "__GEw7cB__0}' >> __GEw7cB__{output}
        getContent __GEw7cB__{taskFile} pipelineRun | awk '{print "      "__GEw7cB__0}'>> __GEw7cB__{output}
      
        
        local innerPipelinePath=__GEw7cB__{pipelineDir}/__GEw7cB__{innerPipelineName}.yaml
        echo 'apiVersion: tekton.dev/v1beta1
      kind: Pipeline
      metadata:
        name: '__GEw7cB__{innerPipelineName}'
      spec:' >> __GEw7cB__{innerPipelinePath}
        getContent __GEw7cB__{taskFile} pipelineSpec \\
        | sed -r 's/^  (.*)/\\1/' >> __GEw7cB__{innerPipelinePath}
      }
      
      function manualTestTask() {
        local taskFile=__GEw7cB__1
        
        local name=__GEw7cB__(getContent __GEw7cB__{taskFile} name true)
        local innerPipelineRunName=__GEw7cB__{name#*: }
        
        echo "__GEw7cB__{name}" |  sed -r 's/^ (.*)/  -\\1/' >> __GEw7cB__{output}
        getContent __GEw7cB__{taskFile} runAfter true | awk '{print "  "__GEw7cB__0}' >> __GEw7cB__{output}
        
        local env=__GEw7cB__(getValue __GEw7cB__{taskFile} env "  ")
        sed -e "s/\\__GEw7cB__{INNER_PIPELINE_RUN_NAME}/__GEw7cB__{innerPipelineRunName}/" \\
            -e "s/\\__GEw7cB__{ENV}/__GEw7cB__{env}/" \\
            -e "s/\\__GEw7cB__{DEPLOY_SUCCESS_WEBHOOK}/__GEw7cB__{deploySuccessWebhook}/" \\
            __GEw7cB__{MANUAL_TEST_TASK_TEMPLATE} \\
        | awk '{print "    "__GEw7cB__0}' >> __GEw7cB__{output}
      }
      
      #-----------------------------------------------------
      set -ex
      
      mkdir __GEw7cB__{pipelineDir} -p
      
      for file in __GEw7cB__(find __GEw7cB__{configDir} -maxdepth 1 -name 'pipeline.promotion-*.yaml'); do
        output=__GEw7cB__{pipelineDir}/__GEw7cB__(basename __GEw7cB__file)
        
        validateConfig __GEw7cB__file
      
        pipelineHeader __GEw7cB__file
      
        pipelineTasks __GEw7cB__file
      done
      EOFEOFEOFEOF
      sed -i '/__GEw7cB__/s/__GEw7cB__/$/g' convert.sh
      sh convert.sh '$(workspaces.resources.path)/$(params.scan-path)' ~/output '$(params.deploy-success-webhook)'
      $kubectl apply -f ~/output
