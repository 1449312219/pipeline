apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: promotion-config-convert
spec:
  params:
  - name: url
    default: https://kubernetes.default
  - name: scan-path
    description: 扫描指定目录内配置
    default: ""
  - name: repo-branch
    description: git仓库分支
  - name: expect-branch
    description: 期望git仓库分支, 仅为期望分支时生成pipeline
    default: master
  - name: deploy-success-webhook
    description: 部署成功通知地址, 用于需部署后测试的任务
    default: ""
  workspaces:
  - name: resources
    description: 存储资源, 将扫描其内配置
    readOnly: true
  steps:
  - name: build
    image: lachlanevenson/k8s-kubectl
    imagePullPolicy: IfNotPresent 
    script: |
      url=$(params.url)
      ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
      namespace=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)

      kubectl="kubectl -s=$url --certificate-authority=$ca --token=$token"
      
      
      if test "$(params.repo-branch)" != "$(params.expect-branch)"; then
        exit
      fi
      
      mkdir ~/script -p && cd ~/script
      cat <<EOFEOFEOFEOF > env-deploy-task-template.yaml
      taskRef:
        kind: ClusterTask
        name: pipelinerun-apply
      params:
      - name: span-id
        value: "__3yMbh4__(params.job-id)"
      - name: generate-name
        value: env-deploy-__3yMbh4__{INNER_PIPELINE_RUN_NAME}
      - name: spec
        value: |
          pipelineRef:
            name: env-deploy
          workspaces:
          - name: pipeline 
            persistentVolumeClaim:
              claimName: __3yMbh4__(params.pipelines-claim)
            subPath: __3yMbh4__(params.job-id)
          - name: gitea-user-token
            secret:
              SecretName: gitea-user-token
          params:
          - name: job-id
            value: "__3yMbh4__(params.job-id)"
          - name: pipelines-claim
            value: "__3yMbh4__(params.pipelines-claim)"
          - name: env
            value: "__3yMbh4__{ENV}"
          - name: promotion-name
            value: "__3yMbh4__(params.promotion-name)"
          - name: env-version
            value: "__3yMbh4__(params.env-version)"
          - name: repo-full-name
            value: "__3yMbh4__(params.repo-full-name)"
          - name: repo-ref
            value: "__3yMbh4__(params.repo-ref)"
          - name: manifest-repo-full-name
            value: "__3yMbh4__(params.manifest-repo-full-name)"
          - name: manifest-repo-url
            value: __3yMbh4__(params.manifest-repo-url)
          - name: git-server-http
            value: __3yMbh4__(params.git-server-http)
          - name: issue-id
            value: "__3yMbh4__(params.issue-id)"
          - name: deploy-webhook
            value: "__3yMbh4__{DEPLOY_SUCCESS_WEBHOOK}"
      - name: return-task
        value: env-lock-name
      EOFEOFEOFEOF
      sed -i '/__3yMbh4__/s/__3yMbh4__/$/g' env-deploy-task-template.yaml
      cat <<EOFEOFEOFEOF > manual-test-task-template.yaml
      taskRef:
        kind: ClusterTask
        name: pipelinerun-apply
      params:
      - name: span-id
        value: "__p98qjL__(params.job-id)"
      - name: generate-name
        value: manual-test-__p98qjL__{INNER_PIPELINE_RUN_NAME}
      - name: spec
        value: |
          pipelineRef:
            name: manual-test
          workspaces:
          - name: pipeline 
            persistentVolumeClaim:
              claimName: __p98qjL__(params.pipelines-claim)
            subPath: __p98qjL__(params.job-id)
          - name: gitea-user-token
            secret:
              SecretName: gitea-user-token
          params:
          - name: job-id
            value: "__p98qjL__(params.job-id)"
          - name: pipelines-claim
            value: "__p98qjL__(params.pipelines-claim)"
          - name: env
            value: "__p98qjL__{ENV}"
          - name: promotion-name
            value: "__p98qjL__(params.promotion-name)"
          - name: env-version
            value: "__p98qjL__(params.env-version)"
          - name: repo-full-name
            value: "__p98qjL__(params.repo-full-name)"
          - name: repo-ref
            value: "__p98qjL__(params.repo-ref)"
          - name: manifest-repo-full-name
            value: "__p98qjL__(params.manifest-repo-full-name)"
          - name: manifest-repo-url
            value: __p98qjL__(params.manifest-repo-url)
          - name: git-server-http
            value: __p98qjL__(params.git-server-http)
          - name: issue-id
            value: "__p98qjL__(params.issue-id)"
          - name: deploy-webhook
            value: "__p98qjL__{DEPLOY_SUCCESS_WEBHOOK}"
      EOFEOFEOFEOF
      sed -i '/__p98qjL__/s/__p98qjL__/$/g' manual-test-task-template.yaml
      cat <<EOFEOFEOFEOF > promotion-pipeline-header-template.yaml
      apiVersion: tekton.dev/v1beta1
      kind: Pipeline
      metadata:
        name: __s4SgpY__{PROMOTION_NAME}
        labels:
          promotion-pipelines/custom-config: "true"
        annotations:
          promotion-pipelines/branch-pattern: __s4SgpY__{BRANCH_PATTERN}
      spec:
        params:
        - name: job-id
          description: 任务ID,串联起所有子流水线
        - name: pipelines-claim
          description: pipelines-pvc claim, 用于传递给启动的pipelinerun
      
        - name: promotion-name
          description: promotion name
        - name: env-version
          description: env version, 用于关联具体env
          
        - name: repo-full-name
          description: git仓库名称, 用于执行gitea请求 (创建工单,评论)
        - name: repo-branch
          description: git仓库分支
        - name: repo-ref
          description: git仓库SHA
        - name: repo-url
          description: git仓库URL
          
        - name: manifest-repo-full-name
          description: 资源仓库名称
        - name: manifest-repo-url
          description: 资源仓库URL
      
        - name: git-server-http
          description: git server host (如:http://localhost:30280)
        - name: issue-id
          description: 工单ID, 用以与用户交互
      
        workspaces:
        - name: pipeline
          description: 流水线数据目录
      EOFEOFEOFEOF
      sed -i '/__s4SgpY__/s/__s4SgpY__/$/g' promotion-pipeline-header-template.yaml
      cat <<EOFEOFEOFEOF > convert.sh
      PROMOTION_PIPELINE_HEADER_TEMPLATE="promotion-pipeline-header-template.yaml"
      ENV_DEPLOY_TASK_TEMPLATE="env-deploy-task-template.yaml"
      MANUAL_TEST_TASK_TEMPLATE="manual-test-task-template.yaml"
      
      configDir=__tMaRYU__1  #存储项目中资源配置
      shift
      
      pipelineDir=__tMaRYU__1  #pipeline输出目录
      shift
      output="" #存储生成的pipeline文件
      
      tmpDir="./"  #存储临时文件
      
      deploySuccessWebhook=__tMaRYU__1
      
      #-----------------------------------------------------
      
      function validateConfig() {
        local configFile=__tMaRYU__1
        if egrep "^ +taskSpec:" __tMaRYU__{configFile}; then
          echo '[taskSpec] cannot exist !' >&2
          return 1
        fi
      }
      
      #-----------------------------------------------------
      
      function pipelineHeader() {
        local configFile=__tMaRYU__1
        
        local pipelineName=__tMaRYU__(basename __tMaRYU__configFile) \\
           && pipelineName=__tMaRYU__{configFile#*pipeline.} \\
           && pipelineName=__tMaRYU__{pipelineName%.yaml*}
        
        local branchPattern=__tMaRYU__(sed -nr '/^branchPattern: .+__tMaRYU__/ {s/^branchPattern: (.+)__tMaRYU__/\\1/p;q}' __tMaRYU__{configFile})
        if test -z "__tMaRYU__{branchPattern}"; then
          echo '[branchPattern] not specified !' >&2
          return 1
        fi
        
        sed -e "s/\\__tMaRYU__{PROMOTION_NAME}/__tMaRYU__{pipelineName}/" \\
            -e "s/\\__tMaRYU__{BRANCH_PATTERN}/__tMaRYU__{branchPattern}/" \\
            __tMaRYU__{PROMOTION_PIPELINE_HEADER_TEMPLATE} >> __tMaRYU__{output}
      }
      
      #-----------------------------------------------------
      
      function pipelineTasks() {
        echo "  tasks:" >> __tMaRYU__{output}
        
        local configFile=__tMaRYU__1
        
        local TEMP_PREFIX="__tMaRYU__{tmpDir}/.tmp.pipeline-task-"
        
        splitTasks __tMaRYU__{configFile} __tMaRYU__{TEMP_PREFIX} tasks
        
        local file=""
        for file in __tMaRYU__{TEMP_PREFIX}*; do
          local task=__tMaRYU__(getTaskType __tMaRYU__file)
          case __tMaRYU__task in
            env-deploy ) envDeployTask __tMaRYU__file;;
            manual-test ) manualTestTask __tMaRYU__file;;
            env-lock-release ) envLockReleaseTask __tMaRYU__file;;
            * ) commonTask __tMaRYU__file;;
          esac
        done
        
        rm __tMaRYU__{TEMP_PREFIX}* -f
      }
      
      function pipelineFinally() {
        local configFile=__tMaRYU__1
        
        if grep "^finally:" 2>&1 >/dev/null __tMaRYU__{configFile}; then
          echo "  finally:" >> __tMaRYU__{output}
        else
          return 0
        fi
        
        local TEMP_PREFIX="__tMaRYU__{tmpDir}/.tmp.pipeline-finally-task-"
        
        splitTasks __tMaRYU__{configFile} __tMaRYU__{TEMP_PREFIX} finally
        
        local file=""
        for file in __tMaRYU__{TEMP_PREFIX}*; do
          local task=__tMaRYU__(getTaskType __tMaRYU__file)
          case __tMaRYU__task in
            env-deploy ) return 1;;
            manual-test ) return 1;;
            env-lock-release ) envLockReleaseTask __tMaRYU__file;;
            * ) commonTask __tMaRYU__file;;
          esac
        done
        
        rm __tMaRYU__{TEMP_PREFIX}* -f
      }
      
      #-----------------------------------------------------
      
      #拆分tasks到独立文件
      function splitTasks() {
        local configFile=__tMaRYU__1
        local tempPreifx=__tMaRYU__2
        local section=__tMaRYU__3
        
        local i=0
        local file=
        while IFS=~ read line; do
          if echo "__tMaRYU__line"|grep ^- 2>&1 >/dev/null; then
            i=__tMaRYU__(( __tMaRYU__i + 1 ))
            file=__tMaRYU__{tempPreifx}__tMaRYU__i
            touch __tMaRYU__file
          fi
          echo "__tMaRYU__line" >> __tMaRYU__{file}
        done <<EOF
      __tMaRYU__(sed -nr "/^__tMaRYU__{section}:/,/^[a-zA-Z0-9]/ {/^[- ]/p}" __tMaRYU__{configFile})
      EOF
      }
      
      function getTaskType() {
        local taskFile=__tMaRYU__1
        sed -nr '/  taskRef:/,/^  [a-zA-Z0-9]/{/^    name:/s/.*name: (.*)/\\1/p}' __tMaRYU__{taskFile}
      }
      function getContent() {
        local file=__tMaRYU__1
        local key=__tMaRYU__2
        
        local hasKey=__tMaRYU__3
        local args=
        if test "__tMaRYU__hasKey" == "true"; then
          args="/^  __tMaRYU__key:/{p;d} /^- __tMaRYU__key:/{s/^-(.*)/ \\1/p;d}"
        fi
        sed -nr "/^[- ] __tMaRYU__key:/,/^  [a-zA-Z0-9]/{__tMaRYU__args /^  [- ]/p}" __tMaRYU__file
      }
      function getValue() {
        local file=__tMaRYU__1
        local name=__tMaRYU__2
        local prefix="__tMaRYU__3"
        sed -nr "/^__tMaRYU__{prefix}- name: __tMaRYU__{name}/,/^__tMaRYU__{prefix}[^ ]/ {
          /^__tMaRYU__{prefix}  value: [^|]/ {
            s/^ +value: (.*)/\\1/p;
            q;
          }
          /^__tMaRYU__{prefix}  value: |/ {
            s/^ +value: (.*)/\\1/p;
          }
          /^__tMaRYU__{prefix}    / {
            s/^__tMaRYU__{prefix}  (.*)/\\1/p;
          }
        }" __tMaRYU__{file}
      }
      function addValue() {
        local taskFile=__tMaRYU__1
        local prefix=__tMaRYU__2
        local name=__tMaRYU__3
        local value=__tMaRYU__4
        sed -i "/^__tMaRYU__{prefix}params:/a\\\\__tMaRYU__{prefix}- name: __tMaRYU__{name}\\n__tMaRYU__{prefix}  value: __tMaRYU__{value}" __tMaRYU__{taskFile}
      }
      
      function envLockReleaseTask() {
        local taskFile=__tMaRYU__1
        addValue __tMaRYU__{taskFile} "  " owner-name '"__tMaRYU__(params.job-id)"'
        commonTask __tMaRYU__{taskFile}
      }
      
      function commonTask() {
        local taskFile=__tMaRYU__1
        if getContent __tMaRYU__{taskFile} taskRef | grep kind: 2>&1 >/dev/null; then
          echo '[kind] cannot be specified in [taskRef] !' >&2
          return 1
        fi
        sed -r '/^  taskRef:/a\\    kind: ClusterTask' __tMaRYU__{taskFile} \\
        | awk '{print "  "__tMaRYU__0}' >> __tMaRYU__{output}
      }
      
      function envDeployTask() {
        deployedTestTask __tMaRYU__1 __tMaRYU__{ENV_DEPLOY_TASK_TEMPLATE}
      }
      
      function manualTestTask() {
        deployedTestTask __tMaRYU__1 __tMaRYU__{MANUAL_TEST_TASK_TEMPLATE}
      }
      
      function deployedTestTask() {
        local taskFile=__tMaRYU__1
        local templateFile=__tMaRYU__2
        
        local name=__tMaRYU__(getContent __tMaRYU__{taskFile} name true)
        local innerPipelineRunName=__tMaRYU__{name#*: }
        
        echo "__tMaRYU__{name}" |  sed -r 's/^ (.*)/  -\\1/' >> __tMaRYU__{output}
        getContent __tMaRYU__{taskFile} runAfter true | awk '{print "  "__tMaRYU__0}' >> __tMaRYU__{output}
        
        local env=__tMaRYU__(getValue __tMaRYU__{taskFile} env "  ")
        sed -e "s/\\__tMaRYU__{INNER_PIPELINE_RUN_NAME}/__tMaRYU__{innerPipelineRunName}/" \\
            -e "s/\\__tMaRYU__{ENV}/__tMaRYU__{env}/" \\
            -e "s/\\__tMaRYU__{DEPLOY_SUCCESS_WEBHOOK}/__tMaRYU__{deploySuccessWebhook}/" \\
            __tMaRYU__{templateFile} \\
        | awk '{print "    "__tMaRYU__0}' >> __tMaRYU__{output}
      }
      
      #-----------------------------------------------------
      set -ex
      
      mkdir __tMaRYU__{pipelineDir} -p
      
      for file in __tMaRYU__(find __tMaRYU__{configDir} -maxdepth 1 -name 'pipeline.promotion-*.yaml'); do
        output=__tMaRYU__{pipelineDir}/__tMaRYU__(basename __tMaRYU__file)
        
        validateConfig __tMaRYU__file
      
        pipelineHeader __tMaRYU__file
      
        pipelineTasks __tMaRYU__file
        
        pipelineFinally __tMaRYU__file
      done
      EOFEOFEOFEOF
      sed -i '/__tMaRYU__/s/__tMaRYU__/$/g' convert.sh
      sh convert.sh '$(workspaces.resources.path)/$(params.scan-path)' ~/output '$(params.deploy-success-webhook)'
      $kubectl apply -f ~/output
