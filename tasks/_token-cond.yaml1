apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: token
spec:
  params:
    - name: url
      default: https://kubernetes.default

    - name: opt
      description: create / await / clean
      default: create

    - name: exists
      default: await
    - name: expect
      default: Success
    - name: interval
      default: "30"

    - name: name
      description: ConfigMap name
    - name: id
    - name: start
      default: ""
    - name: end
      default: ""
    - name: status
      default: Processing
  check:
    image: 10.1.40.43:5000/lachlanevenson/k8s-kubectl
    imagePullPolicy: IfNotPresent 
    script: |
        url=$(params.url)
        ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
        namespace=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)

        kubectl="kubectl -s=$url --certificate-authority=$ca --token=$token -n $namespace"



        function doCreate() {
          local start=$(params.start)
          start=${start:=$(date -Is)}
          result=$($kubectl create configmap $(params.name) \
                   --from-literal=id=$(params.id) \
                   --from-literal=start=${start} \
                   --from-literal=status=$(params.status) 2>&1)
        }
        function isExists() {
          echo $result | grep exists 1>/dev/null 
        }
        function create() {
          until doCreate; do
            if ! isExists; then
              echo create token error!
              exit 1
            fi

            case $(params.exists) in
              continue )
                 exit 0
                 ;;
              fail )
                 exit 1
                 ;;
              await )
                sleep $(params.interval)
                ;;
            esac
          done
        }


        function getStatus() {
          status=$($kubectl get configmap $(params.name) -o jsonpath={.data.id}---{.data.status} 2>&1)
        }
        function await() {
          until  getStatus &&  [[ $status != $(params.id)---Processing ]]; do
            sleep $(params.interval)
          done

          if [[ $status == $(params.id)---$(params.expect) ]]; then
            echo is Expect
            clean
          else
            echo not Expect
            exit 1
          fi
        }

        
        function clean() {
          $kubectl delete configmap $(params.name)
        }

        $(params.opt)
