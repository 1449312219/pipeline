apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: gitea
spec:
  workspaces:
  - name: token
    readOnly: true

  params:
    - name: gitea
      default: gitea-gitea-http
    - name: port
      default: "3000"

    - name: cmd
      description: createDeployKey / createIssue / createComment
    - name: args
      description: |
        传于gitea相应请求, 可支持循环
        createDeployKey:  repoFullName title key
        createIssue:  repoFullName title body assignees
        createComment: repoFullName issueId body

  volumes:
  - name: output
    emptyDir: {}
  results:
  - name: id

  steps:
    - name: await
      image: 10.1.40.43:5000/curlimages/curl:7.71.1
      volumeMounts:
      - name: output
        mountPath: /volumes/output
      securityContext:
        runAsUser: 0

      script: |
        function url() {
          method=$1
          path=$2
          host=$(params.gitea)
          port=$(params.port)
          token=$(cat $(workspaces.token.path))
          data=$3
        
          echo "curl -X $method http://$host:$port/api/v1$path?access_token=$token" \
                -H \"accept: application/json\" -H \"Content-Type: application/json\" \
                -d \'$data\' \
                -f
        }
        
        function createIssue() {
          repoFullName=$1
          title=$2
          body=$3
          assignees=$4  #(echo $3|sed 's|"|\\"|g')
          url=$(url POST /repos/$repoFullName/issues "{
                  \"title\": \"$title\",
                  \"body\": \"$body\", 
                  \"assignees\": [ $assignees ] }")
          sh -c "$url"
        }
        
        function createComment() {
          repoFullName=$1
          issue=$2
          body=${3//\"/\\\"}
          url=$(url POST /repos/$repoFullName/issues/$issue/comments "{ \"body\": \"$body\" }")
          sh -c "$url"                                
        }
 
        function createDeployKey() {
          repoFullName=$1
          title=$2
          key=$3
          url=$(url POST /repos/$repoFullName/keys "{ \"title\": \"$title\", \"key\": \"$key\", \"read_only\": true }")
          sh -c "$url"
        }

        while read args; do
          if test -n "$args"; then
            eval $(params.cmd) $args >> $(mktemp -u -p /volumes/output XXXXXX)
          else
            true
          fi
        done <<EOF
        $(params.args)
        EOF

    - name: get-id
      image: 10.1.40.43:5000/stedolan/jq
      volumeMounts:
      - name: output
        mountPath: /volumes/output
      script: |
        cd /volumes/output
        ls | xargs jq -r '.id' | xargs echo -n >> $(results.id.path)
