apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: gitea-settings-outer
spec:
  params:
  - name: owner
    description: 项目所有者
  - name: type
    description: 所有者类型 (user/org)
    default: org

  - name: repo-name
    description: 项目仓库名称
  - name: repo-description
    description: 项目描述
    default: ""
  - name: repo-manifest-suffix
    description: 项目资源仓库后缀
    default: -manifest

  - name: webhooks
    description: | 
      webhook配置, 可指定多行, 每行一条配置
      格式: notifyUrl branchFilter events(逗号分隔)

  - name: git-server
    description: git server host (如:http://localhost:30280)
    
  - name: inner-namespace
    description: 用于创建inner-pipelinerun


  workspaces:
  - name: token
    description: 存储gitea user token (于/token文件)


  tasks:
  - name: create-repo
    taskRef:
      kind: ClusterTask
      name: gitea
    params:
    - name: git-server
      value: $(params.git-server)
    - name: cmd
      value: createRepo
    - name: args
      value: |
        $(params.owner) $(params.type) $(params.repo-name) '$(params.repo-description)'
        $(params.owner) $(params.type) $(params.repo-name)$(params.repo-manifest-suffix) 'manifests'
    workspaces:
    - name: token
      workspace: token

  - name: params
    taskSpec:
      steps:
      - image: 10.1.40.43:5000/busybox:1.31
        script: |
          while read line; do
            if test -z "$line"; then
              continue
            fi
            echo '$(params.repo-full-name)' $line >> $(results.webhook-args.path)
          done <<EOF
          $(params.webhooks)
          EOF
          
          while read name ssh-url; do
            if test -z "$name"; then
              continue
            fi
            if test "$name" == $(params.manifest-repo-name); then
              echo -n ${ssh-url} > $(results.manifest-repo-ssh-url.path)
              break
            fi
          done <<EOF
          $(params.repo-urls)
          EOF
      params:
      - name: repo-full-name
      - name: webhooks
      - name: manifest-repo-name
      - name: repo-urls
      results:
      - name: webhook-args
      - name: manifest-repo-ssh-url
    params:
    - name: repo-full-name
      value: $(params.owner)/$(params.repo-name)
    - name: webhooks
      value: $(params.webhooks)
    - name: manifest-repo-name
      value: $(params.repo-name)$(params.repo-manifest-suffix)
    - name: repo-urls
      value: $(tasks.create-repo.results.repo-url)

  - name: create-webhook
    taskRef:
      kind: ClusterTask
      name: gitea
    params:
    - name: git-server
      value: $(params.git-server)
    - name: cmd
      value: createWebHook
    - name: args
      value: $(tasks.params.results.webhook-args)
    workspaces:
    - name: token
      workspace: token
      
  - name: inner-apply
    taskRef:
      kind: ClusterTask
      name: pipelinerun-apply
    params:
    - name: namespace
      value: $(params.inner-namespace)
    - name: name
      value: $(context.pipelineRun.name)-inner
    - name: spec
      value: |
        pipelineRef:
          name: gitea-settings-inner
        serviceAccountName: pipeline
        workspaces:
        - name: workspace
          persistentVolumeClaim:
            claimName: pipeline-all-workspaces-pvc
          subPath: $(context.pipelineRun.name)-inner
        - name: manifest-repo-init
          configmap:
            name: manifest-repo-init
        params:
        - name: manifest-repo-url
          value: $(tasks.params.results.manifest-repo-ssh-url)